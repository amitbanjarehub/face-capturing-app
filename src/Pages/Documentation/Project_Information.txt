A real-time selfie comparison app is quite feasible and involves several technologies. Here's a breakdown of the tools, libraries, and structure you'll need to build it:

1. Existing Applications:

This technology is used in facial recognition apps, security systems, and certain authentication mechanisms. Some examples are:

Apple Face ID: Used for unlocking iPhones.
Google Face Unlock: Used in some Android phones.
Trueface: A facial recognition platform.
Amazon Rekognition: AWS service for image and video analysis.

2. Tools and Libraries You Will Use:

Frontend (React.js):

React Camera API: For capturing selfies using the phone or computer's camera.

Library: react-webcam

Facial Recognition API:
You can use face-api.js, which is a JavaScript library for face detection and recognition.

Library: face-api.js

File Upload:
Upload the captured image for storage in the database.

Library: axios to send data to the backend.

Backend (Node.js with Express.js):
For handling requests and storing the selfie in MongoDB.

Multer: To handle file uploads in Node.js.

Database (MongoDB):
Store the captured selfies and associated data.
Store metadata like the date, time, user ID, and image URLs.

3. Key Steps:

Frontend:

Capture the Selfie:

Use react-webcam to take a photo.

Send the Image to the Backend:
Use axios to send the captured image to the backend for storage and processing.

Compare Real-Time Image:
Use face-api.js for facial recognition. It will compare the newly captured image with the stored selfie.

Display the Match Percentage:
Calculate the percentage match and display it in the UI.

Backend:

Handle File Upload:
Use Multer to save the captured image on the server or in a cloud storage solution like AWS S3.
Store in MongoDB:
Save the selfie with a user ID or timestamp in MongoDB.